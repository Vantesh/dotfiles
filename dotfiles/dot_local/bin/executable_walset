#!/usr/bin/env bash
#
# A script to apply a new theme generated by matugen from a wallpaper.

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
readonly GTK_IMPORT_LINE='@import "colors.css";'
readonly GTK_CSS_FILES=(
  "$HOME/.config/gtk-4.0/gtk.css"
  "$HOME/.config/gtk-4.0/gtk-dark.css"
)
readonly SERVICES_TO_RESTART=(
  "hyprpolkitagent"
  "xdg-desktop-portal-gtk"
)

update_system_agents() {
  for service in "${SERVICES_TO_RESTART[@]}"; do
    if systemctl --user is-active --quiet "$service"; then
      systemctl --user restart "$service" >/dev/null 2>&1
    fi
  done
  pkill -f "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1" >/dev/null 2>&1 || true
  /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
}

update_gtk_css() {
  for file in "${GTK_CSS_FILES[@]}"; do
    if [[ -L "$file" ]] || ! grep -Fxq "$GTK_IMPORT_LINE" "$file" 2>/dev/null; then
      # Forcefully remove the symlink/file and create a new, correct file.
      rm -f "$file"
      echo "$GTK_IMPORT_LINE" >"$file"
    fi
  done
}

update_spotify() {
  if [[ "$(spicetify config current_theme)" != "marketplace" ]]; then
    spicetify config current_theme marketplace >/dev/null 2>&1
  fi

  if pgrep spotify >/dev/null 2>&1; then
    (
      spicetify -q watch -s &
      sleep 1
      pkill spicetify || true
    ) >/dev/null 2>&1 &
  else
    spicetify apply >/dev/null 2>&1
  fi
}

update_folder_colors() {
  export PATH="$HOME/.local/bin:$PATH"
  declare -A colors=(
    [blue]="#89B4FA" [grey]="#878688" [green]="#84A756" [adwaita]="#B4BEFE"
    [carmine]="#AC0406" [magenta]="#CBA6F7" [orange]="#E58E3B" [pink]="#F5C2E7"
    [red]="#F38BA8" [breeze]="#89DCEB" [teal]="#94E2D5" [yellow]="#F9E2AF"
    [violet]="#7653B4" [cyan]="#04ADC4" [nordic]="#7895B3" [palebrown]="#D1BFAE"
    [deeporange]="#DB633A"[brown]="#AD8B6C" [paleorange]="#E8C289" [darkcyan]="#45ABB7"
    [black]="#4F4F4F" [bluegrey]="#607D8B"
  )

  hex_to_rgb() {
    local hex=$1
    printf -v "$2" '%d' "0x${hex:1:2}"
    printf -v "$3" '%d' "0x${hex:3:2}"
    printf -v "$4" '%d' "0x${hex:5:2}"
  }

  local hex r1 g1 b1 r2 g2 b2 distance min_distance closest_color name
  hex=$(<"$HOME/.local/share/papirus-folders/folder-color.txt")
  hex_to_rgb "$hex" r1 g1 b1
  min_distance=1000000

  for name in "${!colors[@]}"; do
    hex_to_rgb "${colors[$name]}" r2 g2 b2
    distance=$(((r1 - r2) ** 2 + (g1 - g2) ** 2 + (b1 - b2) ** 2))
    if ((distance < min_distance)); then
      min_distance=$distance
      closest_color=$name
    fi
  done

  papirus-folders -C "$closest_color" -t Papirus-Dark >/dev/null 2>&1
}

if [[ $# -lt 1 ]] || [[ ! -f $1 ]]; then
  echo "Description: Apply a new colorscheme and update the system theme."
  echo "Usage: walset <path_to_wallpaper>" >&2

  exit 1
fi

# Generate the color scheme.
matugen -t scheme-fidelity image "$1" >/dev/null 2>&1
wallust -I background -I cursor -I foreground run "$1"


if pgrep nvim >/dev/null; then
    killall -SIGUSR1 nvim
fi

update_system_agents
update_gtk_css

# update bat cache
bat cache --build &> /dev/null

# Run slow updates in the background.
update_folder_colors &
update_spotify &

wait
