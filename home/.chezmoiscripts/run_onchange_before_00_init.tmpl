#!/usr/bin/env bash
set -euo pipefail

# source helpers
source "${CHEZMOI_WORKING_TREE:?env variable missing. Please only run this script via chezmoi}/home/.chezmoiscripts/.00_helpers.sh"

# ------------------------------------------------------------------------------
# CORE SETUP
# ------------------------------------------------------------------------------

ask_for_sudo

deps=(
  "gum" "git"
)
for dep in "${deps[@]}"; do
  if ! command -v "$dep" &>/dev/null; then
    sudo pacman -S --noconfirm "$dep" || {
      log_error "Failed to install $dep. Please install it manually."
      exit 1
    }
  fi
done

# Check if running on TTY and install and configure console fonts
if [[ $(tty) =~ ^/dev/tty[0-9]+$ ]]; then
  if ! pacman -Qi terminus-font &>/dev/null; then
    log_info "Installing Terminus font for console..."
    if sudo pacman -S --noconfirm terminus-font &> /dev/null; then
      if sudo setfont ter-122b &>/dev/null; then
        log_info "Terminus font installed and set successfully"
      else
        log_warning "Failed to set Terminus font. You may need to set it manually in your console settings."
      fi
    fi
  fi
fi



# ------------------------------------------------------------------------------
# SETUP CHAOTIC AUR REPOSITORY
# ------------------------------------------------------------------------------

setup_chaotic_aur() {
  grep -q "chaotic-aur" /etc/pacman.conf && {
    log_info "Chaotic AUR already configured"
    return 0
  }
  if gum spin --title "Setting up Chaotic AUR..." -- bash -c "
    sudo pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com &&
    sudo pacman-key --lsign-key 3056513887B78AEB &&
    sudo pacman -U --noconfirm \
      'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' \
      'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst' &&
    echo -e '\n[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist' | sudo tee -a /etc/pacman.conf &&
    sudo pacman -Syyu --noconfirm
  "; then
    log_success "Chaotic AUR configured successfully"
    return 0
  else
    log_fail "Chaotic AUR setup failed (skipping)"
    log_warning "Manual setup: https://aur.chaotic.cx/"
    return 0
  fi
}

if confirm_action "Setup Chaotic AUR repository?"; then
  setup_chaotic_aur

  AUR_HELPER="${AUR_HELPER:-$(get_user_choice "Choose your AUR helper" "paru" "yay")}"

  if ! has_command "$AUR_HELPER"; then
    install_package "$AUR_HELPER"
    gum spin --title "Syncing AUR database" -- "$AUR_HELPER" -Syyu --noconfirm
  fi
else

  if ! has_command paru && ! has_command yay; then
    AUR_HELPER="${AUR_HELPER:-$(get_user_choice "Choose AUR helper to install manually" "paru" "yay")}"
    log_info "Installing $AUR_HELPER manually..."

    gum spin --title "Installing $AUR_HELPER" -- bash -c "
      cd /tmp
      git clone https://aur.archlinux.org/$AUR_HELPER.git
      cd $AUR_HELPER
      makepkg -si --noconfirm
    "
  fi
fi

# =======================
# CORE COMPONENTS
# =======================
core_packages=(
  xdg-utils-mimeo              # xdg-utils
  hyprland                     # Wayland compositor
  uwsm                         # Universal Wayland Session Manager
  rofi-wayland                 # Wayland launcher
  app2unit-git                 # Run applications as units
  hypridle                     # Idle management
  hyprlock                     # Lock screen
  hyprpicker                   # Color picker
  hyprsunset                   # Blue light filter
  grimblast                    # Screenshot tool
  wpaperd                      # Wallpaper daemon
  imv                          # Image viewer
  hyprshot                     # Screenshot tool
  matugen-bin                  # Color generator
  ags-hyprpanel-git            # panel
  hyprpolkitagent              # Polkit agent for Hyprland
  pyprland                     # for scratchpads
  devify                       # device notification system
  brightnessctl                # Screen brightness
  playerctl                    # Media controller
  thunar                       # File manager
  sddm-git                     # Display manager
  kitty                        # Terminal emulator
  rofimoji                     # Emoji picker for Rofi
  selectdefaultapplication-git # Tool to change default apps
  yad                          # Yet Another Dialog - GUI for scripts

  xdg-desktop-portal-gtk      # Desktop portal for GTK
  xdg-desktop-portal-hyprland # Desktop portal for Hyprland
  archlinux-xdg-menu          # Arch Linux menu integration
  xdg-user-dirs               # User directories
  xdg-autostart               # XDG autostart
  xdg-terminal-exec           # launching desktop apps with Terminal=true

  #required by vscode and other apps to store keyrings
  gnome-keyring
  libgnome-keyring

  # Sytem tools
  topgrade
  mission-center
  udiskie
  ntfs-3g
  exfatprogs
  dosfstools
  f2fs-tools
  gparted
  gpart
  bluez
  bluez-utils
  overskride
  ufw
  pipewire
  pipewire-alsa
  pipewire-pulse
  pipewire-jack
  pwvucontrol
  wireplumber
  networkmanager
  usbutils
  man-db
  xorg-xhost
  layer-shell-qt
  layer-shell-qt5
  qt6-multimedia-ffmpeg
  libfido2
  pacman-contrib
  reflector

)

# =======================
# FONTS
# =======================
fonts=(
  powerline-fonts
  ttf-nerd-fonts-symbols
  ttf-nerd-fonts-symbols-mono
  ttf-apple-emoji
  apple-fonts
  ttf-jetbrains-mono-nerd
  ttf-font-awesome
  noto-fonts-cjk
  noto-fonts-extra
  ttf-liberation
)

# =======================
# APPEARANCE / THEMING
# =======================
appearance=(
  apple_cursor
  nwg-look
  kvantum
  kvantum-qt5
  qt6ct
  qt5ct
)

# =======================
# Input tools and utilities
# =======================
input_tools=(
  clipse-gui
  clipse
  wmctrl
  gpu-screen-recorder
)

# =======================
# DRIVERS
# =======================
# Base graphics drivers
base_drivers=(
  mesa-utils
  wireless-regdb
  libva-utils
  vulkan-tools
  vulkan-headers

)

# Intel-specific drivers
intel_drivers=(
  libva-intel-driver
  intel-media-driver
  vulkan-intel
)

# AMD-specific drivers
amd_drivers=(
  libva-mesa-driver
  vulkan-radeon

)
# NVIDIA-specific drivers
nvidia_drivers=(
  libva-nvidia-driver
  nvidia-utils
  nvidia-dkms
  nvidia-settings
  nvidia-prime
  opencl-nvidia

)

# =======================
# optionals
# =======================
optional=(
  {{- if .signkey }}
  {{- if eq .passwordManager "Bitwarden" }}
  bitwarden-cli
  bitwarden-bin
  {{- else if eq .passwordManager "1Password" }}
  1password-cli
  1password
  {{- end }}
  {{- end }}
  brave-bin
  zen-browser-bin
  visual-studio-code-bin
  qbittorrent-enhanced-git
  vlc-git
  mpv
  btop
  nvtop
  yazi
  neovim
  spotify-launcher
  git-delta
  antidot-bin # clean up home directory

)

packages=(
  "${core_packages[@]}"
  "${fonts[@]}"
  "${appearance[@]}"
  "${input_tools[@]}"
  "${optional[@]}"
)

for package in "${packages[@]}"; do
  install_package "$package"
done


# ------------------------------------------------------------------------------
# Install drivers
# ------------------------------------------------------------------------------

install_drivers() {
  for driver in "${base_drivers[@]}"; do
    install_package "$driver"
  done

  mapfile -t DRIVER_CHOICES < <(get_user_choices "Select graphics drivers (use tab for multiple selection)" "Intel" "AMD" "NVIDIA")

  for choice in "${DRIVER_CHOICES[@]}"; do
    case "$choice" in
      "Intel")
        for driver in "${intel_drivers[@]}"; do
          install_package "$driver"
        done
        ;;
      "AMD")
        for driver in "${amd_drivers[@]}"; do
          install_package "$driver"
        done
        ;;
      "NVIDIA")
        for driver in "${nvidia_drivers[@]}"; do
          install_package "$driver"
        done
        ;;
    esac
  done
}


if echo && confirm_action "Install graphics drivers?"; then
  install_drivers
else
  log_info "Skipping graphics drivers"
fi

# wtf
