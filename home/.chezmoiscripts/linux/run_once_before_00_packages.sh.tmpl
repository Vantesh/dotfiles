#!/usr/bin/env bash

# shellcheck disable=SC1091
source "${CHEZMOI_SOURCE_DIR:?env variable missing. Please only run this script via chezmoi}/.chezmoiscripts/linux/helpers/.00_helpers"
source "${CHEZMOI_SOURCE_DIR:?env variable missing. Please only run this script via chezmoi}/.chezmoiscripts/linux/helpers/.01_chaotic_aur"
source "${CHEZMOI_SOURCE_DIR:?env variable missing. Please only run this script via chezmoi}/.chezmoiscripts/linux/helpers/.02_XDG"

# Package lists from chezmoi data
dependencies=(
  {{- range .packageGroups.core }}
  "{{ . }}"
  {{- end }}
  {{- range .packageGroups.fonts }}
  "{{ . }}"
  {{- end }}
  {{- range .packageGroups.theming }}
  "{{ . }}"
  {{- end }}
)

optional=(
  {{- range .packageGroups.optional }}
  "{{ . }}"
  {{- end }}
)

# Driver packages
drivers=(
  {{- range .packageGroups.drivers.base }}
  "{{ . }}"
  {{- end }}
)

kernel_version=$(uname -r)
if [[ "$kernel_version" == *"-zen"* ]]; then
  drivers+=("{{ .packageGroups.drivers.kernelHeaders.zen }}")
elif [[ "$kernel_version" == *"-lts"* ]]; then
  drivers+=("{{ .packageGroups.drivers.kernelHeaders.lts }}")
elif [[ "$kernel_version" == *"-cachyos"* ]]; then
  drivers+=("{{ .packageGroups.drivers.kernelHeaders.cachyos }}")
else
  drivers+=("{{ .packageGroups.drivers.kernelHeaders.default }}")
fi

gpu_info=$(lspci -nn | grep -Ei "VGA compatible controller|3D controller|Display controller")

# NVIDIA
if [[ $gpu_info == *"NVIDIA Corporation"* ]]; then
  # Determine recommended NVIDIA driver package based on GPU generation.
  # pick nvidia-open-dkms for RTX 20xx/30xx/40xx or GTX 16xx, otherwise fall back to nvidia-dkms.
  if echo "${gpu_info}" | grep -q -E "RTX [2-9][0-9]|GTX 16"; then
    NVIDIA_DRIVER_PACKAGE="nvidia-open-dkms"
  else
    NVIDIA_DRIVER_PACKAGE="nvidia-dkms"
  fi

  drivers+=(
    {{- range .packageGroups.drivers.nvidia }}
    "{{ . }}"
    {{- end }}
  )

  # Add the chosen NVIDIA DKMS package.
  drivers+=("$NVIDIA_DRIVER_PACKAGE")

  # On CachyOS remove any DKMS packages (both open and vendor DKMS), since
  # prebuilt modules are provided by the distribution.
  if [[ "$kernel_version" == *"-cachyos"* ]] || grep -qi 'cachyos' /etc/os-release 2>/dev/null; then
    for i in "${!drivers[@]}"; do
      if [[ ${drivers[i]} == "nvidia-dkms" ]] || [[ ${drivers[i]} == "nvidia-open-dkms" ]]; then
        unset 'drivers[i]'
      fi
    done
  fi
fi

# AMD/ATI
if [[ $gpu_info == *"AMD/ATI"* ]]; then
  drivers+=(
    {{- range .packageGroups.drivers.amd }}
    "{{ . }}"
    {{- end }}
  )
fi

# Intel
if [[ $gpu_info == *"Intel Corporation"* ]]; then
  drivers+=(
    {{- range .packageGroups.drivers.intel }}
    "{{ . }}"
    {{- end }}
  )
fi

if [[ ! $gpu_info =~ (NVIDIA|AMD/ATI|Intel Corporation) ]]; then
  print_warning "No supported GPU found, skipping GPU-specific driver installation."
fi

# Check if the system is a laptop to add power management tools
is_laptop=$(hostnamectl chassis | grep -i "laptop\|notebook")
if [[ -n $is_laptop ]]; then
  dependencies+=(
    {{- range .packageGroups.laptop }}
    "{{ . }}"
    {{- end }}
  )
fi

# SHELL
{{- if ne .chezmoi.username "vantesh" }}
dependencies+=("{{ .default_shell }}")
{{- else }}
dependencies+=("{{ .shell.default }}")
{{- end }}




# =============================================================================
# Initialize Environment
# =============================================================================
common_init

if [[ $(tty) =~ ^/dev/tty[0-9]+$ ]]; then
   print_info "setting up tty fonts for visibility"
   sudo pacman -S --needed --noconfirm terminus-font &>/dev/null
   sudo setfont ter-122b &>/dev/null

fi


# =============================================================================
# Welcome Message
# =============================================================================
clear
print_box "smslant" "Welcome"

echo -e "\n---------------------------------------------"
echo -e "Hyprland Dotfiles - Package Installation"
echo -e "Copyright 2025 \e]8;;https://github.com/vantesh/dotfiles\a${STYLE_BOLD}${COLOR_CYAN}[Vantesh]${COLOR_RESET}\e]8;;\a"
echo -e "This script will install all required packages."
echo -e "\nCore packages: ${COLOR_MAGENTA}${#dependencies[@]}${COLOR_RESET}"
echo -e "Optional packages: ${COLOR_MAGENTA}${#optional[@]}${COLOR_RESET}"
echo -e "---------------------------------------------\n"

if ! confirm "Do you want to continue with package installation?"; then
  print_info "Package installation aborted by user."
  exit 1
fi


# =============================================================================
# Setup Chaotic AUR
# =============================================================================

if ! has_chaotic_repo; then
  if confirm "Do you want to install Chaotic AUR?"; then
    print_box "smslant" "Chaotic AUR"
    print_step "Installing Chaotic AUR"
    install_chaotic_aur
  else
    print_warning "Skipping Chaotic AUR installation."
  fi
fi

# =============================================================================
# System Update
# =============================================================================
print_info "Updating system......"
if sudo pacman -Syu --noconfirm; then
  clear
  print_info "System updated, proceeding with package installation"
fi

# =============================================================================
# Install Packages
# =============================================================================

print_box "smslant" "Core"
print_step "Installing core dependencies"
install_package "${dependencies[@]}"


if confirm "Do you want to install drivers?"; then
  print_box "smslant" "Drivers"
  print_step "Installing drivers"
  install_package "${drivers[@]}"
fi

# Install optional packages
if confirm "Do you want to install optional packages?"; then
  print_box "smslant" "Optionals"
  print_step "Installing optional packages"
  install_package "${optional[@]}"
fi

print_box "smslant" "Completed"

