#!/usr/bin/env bash
# shellcheck disable=SC1091
source "${CHEZMOI_SOURCE_DIR:?env variable missing. Please only run this script via chezmoi}/.chezmoiscripts/linux/helpers/.00_helpers"

# =============================================================================
# Initialize Environment
# =============================================================================
common_init

# ===============================================================================
# MISCELLANEOUS
# ===============================================================================
print_box "smslant" "Miscellaneous"
print_step "Setting up miscellaneous configurations"

print_info "Updating pkgfile database"
if sudo pkgfile --update >/dev/null 2>&1; then
  print_info "pkgfile database updated successfully"
  enable_service "pkgfile-update.timer" "system"
else
  print_warning "Failed to update pkgfile database"
fi

# Regenerate fonts cache
print_info "Regenerating font cache"
if fc-cache -f -v >/dev/null 2>&1; then
  print_info "Font cache regenerated successfully"
else
  print_warning "Failed to regenerate font cache"
fi

if [[ ! -d "${HOME}/.local/share/gnupg" ]]; then
  print_info "Creating GnuPG directory"
  mkdir -p "${HOME}/.local/share/gnupg"
  chmod 700 "${HOME}/.local/share/gnupg"
  print_info "GnuPG directory created successfully"
else
  print_info "GnuPG directory already exists"
fi


if [[ ! -d "${HOME}/.cache/bash" ]]; then
  print_info "Creating bash cache directory"
  mkdir -p "${HOME}/.cache/bash"
  print_info "Bash cache directory created successfully"
else
  print_info "Bash cache directory already exists"
fi

# ====================================================================================
# DNS OVER HTTPS
# ====================================================================================

if confirm "Do you want to enable DNS over HTTPS?"; then
  print_box "smslant" "DOH"
  print_step "Setting up DNS over HTTPS"

  readonly DNSCRYPT_CONFIG_FILE="/etc/dnscrypt-proxy/dnscrypt-proxy.toml"
  readonly NETWORKMANAGER_CONF="/etc/NetworkManager/conf.d/no-resolved.conf"

  install_package "dnscrypt-proxy"

  declare -A cloudflare_dns=(
    ["server_names"]="['cloudflare', 'cloudflare-ipv6']"
  )
  for key in "${!cloudflare_dns[@]}"; do
    update_config "$DNSCRYPT_CONFIG_FILE" "$key" "${cloudflare_dns[$key]}"
  done

  enable_service "dnscrypt-proxy.service" "system"
  print_info "DNS over HTTPS enabled successfully"

  if [[ ! -f "$NETWORKMANAGER_CONF" ]]; then
    write_system_config "$NETWORKMANAGER_CONF" "NetworkManager configuration to disable systemd-resolved" <<EOF
[main]
systemd-resolved=false
dns=none
EOF
  fi

  # Disable systemd-resolved if it's running
  if sudo systemctl is-active --quiet systemd-resolved; then
    print_info "Disabling systemd-resolved"
    if sudo systemctl disable --now systemd-resolved.service >/dev/null 2>&1; then
      print_info "systemd-resolved disabled successfully"
    else
      print_warning "Failed to disable systemd-resolved"
    fi
  fi

  write_system_config "/etc/resolv.conf" "DNS over HTTPS configuration" <<EOF
# Generated by dnscrypt-proxy
# DO NOT EDIT THIS FILE MANUALLY
nameserver ::1
nameserver 127.0.0.1
options edns0
EOF

  # restart NetworkManager to apply changes
  if sudo systemctl restart NetworkManager >/dev/null 2>&1; then
    print_info "NetworkManager restarted successfully"
  else
    print_warning "Failed to restart NetworkManager"
  fi

fi

# ===============================================================================
# FSTAB
# ===============================================================================

if is_btrfs; then
  if sudo sed -i -E '/btrfs/ { s/\brelatime\b/noatime/g; s/\bdefaults\b/defaults,noatime/g; s/(,noatime){2,}/,noatime/g; s/,+/,/g; }' /etc/fstab; then
    print_info "Updated /etc/fstab with noatime for Btrfs"
    reload_systemd_daemon
  else
    print_error "Failed to update /etc/fstab with noatime for Btrfs"
  fi

fi

# ===============================================================================
# FINALIZE
# ===============================================================================

if confirm "Setup done. Do you want to reboot now?"; then
  print_info "Rebooting system to apply changes..."
  reboot
else
  print_warning "Setup done, but you need to reboot for changes to take effect."
fi
