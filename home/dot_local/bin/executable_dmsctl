#!/usr/bin/env bash

# This script provides a consistent interface for brightness, audio, media,
# and session controls. It prefers the DMS quickshell backend when available
# and falls back to portable system tooling.

# EXIT CODES: 1: error, 2: usage error, 3: missing dependency

set -euo pipefail
IFS=$'\n\t'

# You can override these defaults by setting them as environment variables.
readonly PROG_NAME=${0##*/}
readonly DEFAULT_INCREMENT=${DMSCTL_INCREMENT:-5}
readonly DEFAULT_GAMMA=${DMSCTL_GAMMA:-4500}
# some editors (like VS Code) don't handle SIGTERM from logind well.
readonly EDITOR_APP_CLASS=${DMSCTL_EDITOR_APP_CLASS:-"code"}

readonly EXIT_USAGE=2
readonly EXIT_DEPENDENCY=3
USE_DMS=0

log() {
  local type=$1 message=$2
  case "$type" in
  INFO) printf "\033[1;32m[INFO]\033[0m %s\n" "$message" >&2 ;;
  WARN) printf "\033[1;33m[WARNING]\033[0m %s\n" "$message" >&2 ;;
  ERROR) printf "\033[1;31m[ERROR]\033[0m %s\n" "$message" >&2 && exit 1 ;;
  *) printf "%s\n" "$message" >&2 ;;
  esac
}

die() {
  local code=$1
  shift
  local message=${1:-"Unexpected failure"}
  log ERROR "$message"
  exit "$code"
}

usage_error() {
  local message=${1:-"Invalid usage"}
  log ERROR "$message"
  print_usage >&2
  exit "$EXIT_USAGE"
}

print_usage() {
  cat <<EOF
Usage:
  ${PROG_NAME} <command> [args]

Commands:
  brightness +/- [amount]    Adjust backlight step (default: ${DEFAULT_INCREMENT})
  volume +/- [amount]        Raise or lower output volume (default: ${DEFAULT_INCREMENT})
  volume mute|micmute        Toggle sinks and sources
  media next|prev|play-pause Control active media player
  lock                       Lock the current session
  logout                     Terminate the user session safely
  notepad                    Toggle the DMS notepad (requires DMS)
  night [temp]               Toggle night-light mode (default temp: ${DEFAULT_GAMMA})
EOF
}

have_cmd() { command -v "$1" >/dev/null 2>&1; }

require_cmd() {
  local cmd=$1
  if ! have_cmd "$cmd"; then
    die "$EXIT_DEPENDENCY" "Required command '$cmd' is not available"
  fi
}

initialize_backend() {
  if have_cmd qs && qs list --all 2>/dev/null | grep -q '/quickshell/dms/'; then
    USE_DMS=1
  fi
}

require_non_root() {
  if [[ "$(id -u)" -eq 0 ]]; then
    die "$EXIT_USAGE" "Do not run ${PROG_NAME} as root"
  fi
}

validate_amount() {
  local label=$1
  local value=${2:-}
  [[ "$value" =~ ^[0-9]+$ ]] || usage_error "${label} amount must be a non-negative integer"
}

call_dms() {
  ((USE_DMS)) || die "$EXIT_USAGE" "DMS backend unavailable for '$1'"
  qs -c dms ipc call "$@"
}

toggle_audio_channel() {
  local mode=$1
  local target=$2
  local cmd=()

  if ((USE_DMS)); then
    log INFO "Toggling ${mode} via DMS"
    cmd=(call_dms audio "$mode")
  else
    require_cmd wpctl
    log INFO "Toggling ${mode} via wpctl"
    cmd=(wpctl set-mute "$target" toggle)
  fi

  "${cmd[@]}"
}

cmd_brightness() {
  local sign=${1:?"Brightness requires '+' or '-'"}
  [[ "$sign" == "+" || "$sign" == "-" ]] || usage_error "Brightness flag must be '+' or '-'"
  shift
  local amount=${1:-$DEFAULT_INCREMENT}
  validate_amount "Brightness" "$amount"

  local method="decrement"
  [[ "$sign" == "+" ]] && method="increment"

  local backend=""
  local details=""
  local cmd=()
  if ((USE_DMS)); then
    backend="DMS"
    details="${method} by ${amount}"
    cmd=(call_dms brightness "$method" "$amount" "")
  else
    require_cmd brightnessctl
    backend="brightnessctl"
    details="${amount}%${sign}"
    cmd=(brightnessctl set "${amount}%${sign}")
  fi

  log INFO "Adjusting brightness via ${backend} (${details})"
  "${cmd[@]}"
}

cmd_volume() {
  local action=${1:?"Volume requires an action"}
  shift

  case "$action" in
  + | -)
    local amount=${1:-$DEFAULT_INCREMENT}
    validate_amount "Volume" "$amount"
    local method="decrement"
    [[ "$action" == "+" ]] && method="increment"

    local backend=""
    local details=""
    local cmd=()
    if ((USE_DMS)); then
      backend="DMS"
      details="${method} by ${amount}"
      cmd=(call_dms audio "$method" "$amount")
    else
      require_cmd wpctl
      backend="wpctl"
      details="${amount}%${action}"
      cmd=(wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ "${amount}%${action}")
    fi

    log INFO "Adjusting volume via ${backend} (${details})"
    "${cmd[@]}"
    ;;
  mute)
    toggle_audio_channel mute @DEFAULT_AUDIO_SINK@
    ;;
  micmute)
    toggle_audio_channel micmute @DEFAULT_AUDIO_SOURCE@
    ;;
  *)
    usage_error "Invalid volume action '$action'"
    ;;
  esac
}

cmd_media() {
  local action=${1:?"Media requires an action"}
  shift

  local description=""
  local dms_action=""
  local fallback_cmd=()

  case "$action" in
  next)
    description="Skipping to next track"
    dms_action="next"
    fallback_cmd=(playerctl next)
    ;;
  prev)
    description="Returning to previous track"
    dms_action="previous"
    fallback_cmd=(playerctl previous)
    ;;
  play-pause)
    description="Toggling media playback"
    dms_action="playPause"
    fallback_cmd=(playerctl play-pause)
    ;;
  *)
    usage_error "Invalid media action '$action'"
    ;;
  esac

  local backend=""
  local cmd=()
  if ((USE_DMS)); then
    backend="DMS"
    cmd=(call_dms mpris "$dms_action")
  else
    require_cmd playerctl
    backend="playerctl"
    cmd=("${fallback_cmd[@]}")
  fi

  log INFO "${description} via ${backend}"
  "${cmd[@]}"
}

cmd_lock() {
  [[ $# -eq 0 ]] || usage_error "'lock' takes no arguments"
  if ((USE_DMS)); then
    call_dms lock lock
  else
    pidof hyprlock || uwsm-exec hyprlock --no-fade-in
  fi
}

cmd_logout() {
  [[ $# -eq 0 ]] || usage_error "'logout' takes no arguments"
  local user_name=${USER:?"USER environment variable is not set"}

  if [[ -n "$EDITOR_APP_CLASS" ]]; then
    local editor_pid=""

    case "${XDG_CURRENT_DESKTOP:-}" in
    Hyprland)
      require_cmd jq
      editor_pid=$(hyprctl clients -j | jq -r --arg app "$EDITOR_APP_CLASS" '.[] | select(.class==$app) | .pid' | head -n1 || true)
      ;;
    niri)
      require_cmd jq
      editor_pid=$(niri msg --json windows | jq -r --arg app "$EDITOR_APP_CLASS" '.[] | select(.app_id==$app) | .pid' | head -n1 || true)
      ;;
    *)
      log WARN "Unsupported desktop for editor shutdown: ${XDG_CURRENT_DESKTOP:-unknown}"
      ;;
    esac

    if [[ -n "$editor_pid" && "$editor_pid" != "null" ]]; then
      log INFO "Sending SIGKILL to ${EDITOR_APP_CLASS} (PID: ${editor_pid})"
      kill -9 "$editor_pid" 2>/dev/null
    fi
  fi

  log INFO "Requesting logout via loginctl for ${user_name}"
  exec loginctl terminate-user "$user_name"
}

cmd_notepad() {
  [[ $# -eq 0 ]] || usage_error "'notepad' takes no arguments"
  if ((USE_DMS)); then
    log INFO "Toggling DMS notepad"
    call_dms notepad toggle
  else
    log INFO "Skipping notepad toggle; DMS backend not detected"
  fi
}

cmd_night() {

  validate_amount "Night mode temperature" "${1:-$DEFAULT_GAMMA}"

  if ((${1:-$DEFAULT_GAMMA} < 1000 || ${1:-$DEFAULT_GAMMA} > 25000)); then
    log ERROR "Night mode temperature must be between 1000 and 25000"
    exit "$EXIT_USAGE"
  fi

  [[ $# -le 1 ]] || usage_error "'night' takes at most one argument (temperature)"

  if ((USE_DMS)); then
    log INFO "Toggling night mode via DMS"
    call_dms night toggle
  else
    log INFO "Toggling night mode via gammastep"
    if pgrep -x gammastep >/dev/null; then
      pkill -x gammastep
    else
      gammastep -O "${1:-$DEFAULT_GAMMA}" &
    fi
  fi
}

dispatch() {
  local subcommand=${1,,}
  shift

  case "$subcommand" in
  brightness) cmd_brightness "$@" ;;
  volume) cmd_volume "$@" ;;
  media) cmd_media "$@" ;;
  lock) cmd_lock "$@" ;;
  logout) cmd_logout "$@" ;;
  notepad) cmd_notepad "$@" ;;
  night) cmd_night "$@" ;;
  *)
    usage_error "Unknown subcommand '$subcommand'"
    ;;
  esac
}

main() {
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    print_usage
    exit 0
  fi

  if [[ $# -eq 0 ]]; then
    print_usage >&2
    exit "$EXIT_USAGE"
  fi

  require_non_root
  initialize_backend
  dispatch "$@"
}

main "$@"
