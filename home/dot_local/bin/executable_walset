#!/usr/bin/env bash
# walset - Apply colorscheme and update system theme from wallpaper or color
# Exit codes: 0 (success), 1 (failure), 2 (usage error), 127 (dependency missing)

set -euo pipefail
shopt -s nullglob globstar

readonly EXIT_USAGE=2
readonly EXIT_DEPENDENCY=127
readonly PROG_NAME="${0##*/}"
readonly CACHE_DIR="$HOME/.cache/walset"
readonly CURRENT_FILE="$CACHE_DIR/walset.current"
readonly MATUGEN_SCRIPTS_DIR="$HOME/.config/scripts/matugen"
readonly MATUGEN_HELPER_DEFAULT="$MATUGEN_SCRIPTS_DIR/helper.sh"

# initialize_helper sources the matugen helper script
# Returns: exits on failure
initialize_helper() {
  local candidate="${MATUGEN_HELPER_SH:-$MATUGEN_HELPER_DEFAULT}"

  if [[ ! -f "$candidate" ]]; then
    printf '[ERROR] Shared helper not found: %s\n' "$candidate" >&2
    exit "$EXIT_DEPENDENCY"
  fi

  # shellcheck source=/dev/null
  source "$candidate"

  export MATUGEN_HELPER_SH="$candidate"
  export BASH_ENV="$candidate"
}

readonly -a GTK_VERSIONS=(3.0 4.0)
readonly -a UPDATE_TARGETS=(terminal folders hyprlock_icon services spotify bat)

MATUGEN_SCHEME=""
MODE=""
INPUT_KIND=""
INPUT_VALUE=""

# cleanup removes temporary files and kills background processes
# Returns: 0 (always)
cleanup() {
  local exit_code=$?

  jobs -p | xargs -r kill 2>/dev/null || true

  if [[ $exit_code -ne 0 && -f "$CURRENT_FILE" ]]; then
    rm -f "$CURRENT_FILE" 2>/dev/null || true
  fi

  return 0
}

trap cleanup EXIT INT TERM

# usage_error prints error and usage, then exits
# Arguments: $1 - error message
# Returns: exits with EXIT_USAGE
usage_error() {
  local message="${1:-Invalid usage}"
  log ERROR "$message"
  print_usage >&2
  exit "$EXIT_USAGE"
}

print_usage() {
  cat <<EOF
Description: Apply a new colorscheme and update the system theme from a wallpaper or color.

Usage: ${PROG_NAME} image <path_to_wallpaper> [--scheme <matugen_scheme>] [--mode <dark|light>]
       ${PROG_NAME} color <hex_color> [--scheme <matugen_scheme>] [--mode <dark|light>]

Options:
  -s, --scheme   Matugen scheme type (default: scheme-tonal-spot)
  -m, --mode     Theme mode: dark|light (default: dark)
  -h, --help     Show this help and exit

Examples:
  ${PROG_NAME} image ~/Pictures/wallpaper.jpg --mode light
  ${PROG_NAME} image ~/Pictures/wallpaper.jpg --scheme scheme-content --mode dark
  ${PROG_NAME} color "#ff5733"
  ${PROG_NAME} color "#ff5733" --mode light
EOF
}

# run_update_script executes matugen update script
# Arguments: $1 - script name
# Returns: 0 (always succeeds, logs warnings)
run_update_script() {
  local name="$1"
  local script="$MATUGEN_SCRIPTS_DIR/update_${name}.sh"

  if [[ ! -f "$script" ]]; then
    log WARN "Update script missing: $script"
    return 0
  fi

  if [[ ! -x "$script" ]]; then
    if ! chmod +x "$script" 2>/dev/null; then
      log WARN "Cannot make $script executable"
      return 0
    fi
    log INFO "Made $script executable"
  fi

  if ! "$script"; then
    log WARN "Update script failed: $script"
  fi

  return 0
}

# parse_args parses command line arguments
# Arguments: command line arguments
# Returns: exits on invalid arguments
parse_args() {
  MATUGEN_SCHEME="scheme-tonal-spot"
  MODE="dark"
  INPUT_KIND=""
  INPUT_VALUE=""

  while (($#)); do
    case "$1" in
    -h | --help)
      print_usage
      exit 0
      ;;
    image | color)
      [[ -z "$INPUT_KIND" ]] || usage_error "Input source already specified as '$INPUT_KIND'"
      [[ -n "${2:-}" ]] || usage_error "'$1' requires a value"
      INPUT_KIND="$1"
      INPUT_VALUE="$2"
      shift 2
      ;;
    -s | --scheme)
      [[ -n "${2:-}" ]] || usage_error "'$1' requires a value"
      MATUGEN_SCHEME="$2"
      shift 2
      ;;
    -m | --mode)
      [[ -n "${2:-}" ]] || usage_error "'$1' requires a value"
      MODE="${2,,}"
      shift 2
      ;;
    --)
      shift
      [[ $# -eq 0 ]] || usage_error "Unexpected trailing argument: $1"
      break
      ;;
    -*) usage_error "Unknown option: $1" ;;
    *) usage_error "Unknown argument: $1" ;;
    esac
  done

  [[ -n "$INPUT_KIND" ]] || usage_error "You must specify either 'image <path>' or 'color <hex>'"
}

main() {
  initialize_helper
  parse_args "$@"

  local input_source=""
  local is_color_mode="false"

  case "$INPUT_KIND" in
  color)
    [[ "$INPUT_VALUE" =~ ^#?([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$ ]] ||
      die "$EXIT_USAGE" "Invalid hex color format: $INPUT_VALUE (expected #RRGGBB or #RGB)"

    input_source="$INPUT_VALUE"
    [[ "$input_source" =~ ^# ]] || input_source="#$input_source"
    is_color_mode="true"
    log INFO "Applying color theme: $input_source"
    ;;
  image)
    if ! require_command file; then
      die "$EXIT_DEPENDENCY" "Required command 'file' is not available: $LAST_ERROR"
    fi

    [[ -f "$INPUT_VALUE" ]] || die "$EXIT_USAGE" "Wallpaper not found: $INPUT_VALUE"

    if ! file --mime-type -b "$INPUT_VALUE" | grep -q '^image/'; then
      die "$EXIT_USAGE" "File is not a valid image: $INPUT_VALUE"
    fi

    input_source="$INPUT_VALUE"
    log INFO "Applying wallpaper theme: $input_source"
    ;;
  esac

  if [[ ! "$MODE" =~ ^(dark|light)$ ]]; then
    log WARN "Invalid mode '$MODE'; defaulting to 'dark'"
    MODE="dark"
  fi

  if ! ensure_directory "$CACHE_DIR"; then
    log ERROR "Failed to create cache directory: $LAST_ERROR"
    exit 1
  fi

  if [[ -f "$CURRENT_FILE" ]]; then
    local -a cached=()
    if mapfile -t cached <"$CURRENT_FILE" 2>/dev/null; then
      if [[ "${cached[0]:-}" == "$input_source" && "${cached[1]:-}" == "$MATUGEN_SCHEME" && "${cached[2]:-}" == "$MODE" ]]; then
        log INFO "Selection unchanged; skipping refresh"
        exit 0
      fi
    fi
  fi

  export MODE

  if ! printf "%s\n%s\n%s\n" "$input_source" "$MATUGEN_SCHEME" "$MODE" >"$CURRENT_FILE"; then
    log WARN "Unable to update cache file: $CURRENT_FILE"
  fi

  for gtk_version in "${GTK_VERSIONS[@]}"; do
    local gtk_css="$HOME/.config/gtk-$gtk_version/gtk.css"
    if [[ -L "$gtk_css" ]]; then
      log INFO "Removing symlink: $gtk_css"
      rm -f "$gtk_css"
    fi
  done

  if ! require_command matugen; then
    log ERROR "matugen required but not found: $LAST_ERROR"
    exit 1
  fi

  local -a cmd=()
  if [[ "$is_color_mode" == "true" ]]; then
    cmd=(matugen color hex "$input_source" --type "$MATUGEN_SCHEME" --mode "$MODE")
  else
    cmd=(matugen image "$input_source" --type "$MATUGEN_SCHEME" --mode "$MODE")
  fi

  if ! "${cmd[@]}" >/dev/null 2>&1; then
    log ERROR "Matugen failed"
    exit 1
  fi

  run_update_script "gtk" # doesn't work in background, idk why :(

  for target in "${UPDATE_TARGETS[@]}"; do
    run_update_script "$target" &
  done

  case "${XDG_CURRENT_DESKTOP:-}" in
  Hyprland)
    hyprctl reload >/dev/null 2>&1 || true
    ;;
  esac

  wait || true

  log INFO "Theme applied successfully"
}

main "$@"
