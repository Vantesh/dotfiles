#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

readonly EXIT_USAGE=2
readonly EXIT_DEPENDENCY=3

readonly PROG_NAME=${0##*/}
readonly CACHE_DIR="$HOME/.cache/walset"
readonly CURRENT_FILE="$CACHE_DIR/walset.current"
readonly MATUGEN_SCRIPTS_DIR="$HOME/.config/matugen/scripts"
readonly MATUGEN_HELPER_DEFAULT="$MATUGEN_SCRIPTS_DIR/helper.sh"

initialize_helper() {
  local candidate=${MATUGEN_HELPER_SH:-$MATUGEN_HELPER_DEFAULT}

  if [[ ! -f "$candidate" ]]; then
    printf '[ERROR] Shared helper not found: %s\n' "$candidate" >&2
    exit "$EXIT_DEPENDENCY"
  fi

  # shellcheck source=helper.sh
  source "$candidate"

  export MATUGEN_HELPER_SH="$candidate"
  export BASH_ENV="$candidate"
}

readonly -a GTK_VERSIONS=(3.0 4.0)
readonly -a UPDATE_TARGETS=(terminal folders hyprlock_icon services spotify bat)

MATUGEN_SCHEME=""
MODE=""
INPUT_KIND=""
INPUT_VALUE=""

usage_error() {
  local message=${1:-"Invalid usage"}
  log ERROR "$message"
  print_usage >&2
  exit "$EXIT_USAGE"
}

write_current() {
  ensure_directory "$CACHE_DIR"
  if ! printf "%s\n%s\n%s\n" "$1" "$2" "$3" >"$CURRENT_FILE"; then
    log WARN "Unable to update cache file: $CURRENT_FILE"
  fi
}

print_usage() {
  cat <<EOF
Description: Apply a new colorscheme and update the system theme from a wallpaper or color.

Usage: ${PROG_NAME} image <path_to_wallpaper> [--scheme <matugen_scheme>] [--mode <dark|light>]
  ${PROG_NAME} color <hex_color> [--scheme <matugen_scheme>] [--mode <dark|light>]

Options:
  -s, --scheme   Matugen scheme type (default: scheme-tonal-spot)
  -m, --mode     Theme mode: dark|light (default: dark)
  -h, --help     Show this help and exit

Examples:
  ${PROG_NAME} image ~/Pictures/wallpaper.jpg --mode light/dark
  ${PROG_NAME} image ~/Pictures/wallpaper.jpg --scheme scheme-content --mode dark/light
  ${PROG_NAME} color "#ff5733"
  ${PROG_NAME} color "#ff5733" --mode light
EOF
}

validate_image() {
  local file="$1"
  require_command file || die "$EXIT_DEPENDENCY" "Required command 'file' is not available"
  [[ -f "$file" ]] || die "$EXIT_USAGE" "Wallpaper not found: $file"
  if ! file --mime-type -b "$file" | grep -q '^image/'; then
    die "$EXIT_USAGE" "File is not a valid image: $file"
  fi
}

validate_color() {
  local color="$1"
  [[ "$color" =~ ^#?([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$ ]] || die "$EXIT_USAGE" "Invalid hex color format: $color (expected #RRGGBB or #RGB)"
}

normalize_color() {
  local color="$1"
  [[ "$color" =~ ^# ]] && echo "$color" || echo "#$color"
}

run_update_script() {
  local name="$1"
  local script="$MATUGEN_SCRIPTS_DIR/update_${name}.sh"

  if [[ -f "$script" ]]; then
    if [[ ! -x "$script" ]]; then
      chmod +x "$script"
      log INFO "Made $script executable"
    fi
    if ! "$script"; then
      log WARN "Update script failed: $script"
    fi
  else
    log WARN "Update script missing: $script"
  fi
}

run_matugen() {
  local input="$1" scheme="$2" mode="$3" is_color="$4"
  require_command matugen || return 1
  local -a cmd
  if [[ "$is_color" == true ]]; then
    cmd=(matugen color hex "$input" --type "$scheme" --mode "$mode")
  else
    cmd=(matugen image "$input" --type "$scheme" --mode "$mode")
  fi
  "${cmd[@]}" >/dev/null
}

is_selection_unchanged() {
  local in="$1" scheme="$2" mode="$3"
  [[ -f "$CURRENT_FILE" ]] || return 1
  local -a cached=()
  mapfile -t cached <"$CURRENT_FILE" || return 1
  [[ "${cached[0]:-}" == "$in" && "${cached[1]:-}" == "$scheme" && "${cached[2]:-}" == "$mode" ]]
}

parse_args() {
  MATUGEN_SCHEME="scheme-tonal-spot"
  MODE="dark"
  INPUT_KIND=""
  INPUT_VALUE=""

  while (($#)); do
    case "$1" in
    -h | --help)
      print_usage
      exit 0
      ;;
    image | color)
      [[ -z "$INPUT_KIND" ]] || usage_error "Input source already specified as '$INPUT_KIND'"
      [[ -n "${2:-}" ]] || usage_error "'$1' requires a value"
      INPUT_KIND="$1"
      INPUT_VALUE="$2"
      shift 2
      ;;
    -s | --scheme)
      [[ -n "${2:-}" ]] || usage_error "'$1' requires a value"
      MATUGEN_SCHEME="$2"
      shift 2
      ;;
    -m | --mode)
      [[ -n "${2:-}" ]] || usage_error "'$1' requires a value"
      MODE=${2,,}
      shift 2
      ;;
    --)
      shift
      [[ $# -eq 0 ]] || usage_error "Unexpected trailing argument: $1"
      break
      ;;
    -*) usage_error "Unknown option: $1" ;;
    *) usage_error "Unknown argument: $1" ;;
    esac
  done

  [[ -n "$INPUT_KIND" ]] || usage_error "You must specify either 'image <path>' or 'color <hex>'"
}

main() {
  initialize_helper
  parse_args "$@"

  local input_source=""
  local is_color_mode=false

  case "$INPUT_KIND" in
  color)
    validate_color "$INPUT_VALUE"
    input_source=$(normalize_color "$INPUT_VALUE")
    is_color_mode=true
    log INFO "Applying color theme: $input_source"
    ;;
  image)
    validate_image "$INPUT_VALUE"
    input_source="$INPUT_VALUE"
    log INFO "Applying wallpaper theme: $input_source"
    ;;
  esac

  if [[ ! "$MODE" =~ ^(dark|light)$ ]]; then
    log WARN "Invalid mode '$MODE'; defaulting to 'dark'"
    MODE="dark"
  fi

  ensure_directory "$CACHE_DIR"

  if is_selection_unchanged "$input_source" "$MATUGEN_SCHEME" "$MODE"; then
    log INFO "Selection unchanged; skipping refresh"
    exit 0
  fi

  export MODE
  write_current "$input_source" "$MATUGEN_SCHEME" "$MODE"

  for gtk_version in "${GTK_VERSIONS[@]}"; do
    local gtk_css="$HOME/.config/gtk-$gtk_version/gtk.css"
    if [[ -L "$gtk_css" ]]; then
      log INFO "Removing symlink: $gtk_css"
      rm -f "$gtk_css"
    fi
  done

  if ! run_matugen "$input_source" "$MATUGEN_SCHEME" "$MODE" "$is_color_mode"; then
    log ERROR "Matugen failed"
    rm -f "$CURRENT_FILE"
    exit 1
  fi

  # Run update scripts (gtk first, idk why it doesn't work in background)
  run_update_script "gtk"

  for target in "${UPDATE_TARGETS[@]}"; do
    run_update_script "$target" &
  done

  case "${XDG_CURRENT_DESKTOP:-}" in
  Hyprland)
    hyprctl reload >/dev/null
    ;;
  esac

  wait || true

  log INFO "Theme applied successfully"
}

main "$@"
