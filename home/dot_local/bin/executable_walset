#!/usr/bin/env bash
set -euo pipefail

readonly CACHE_DIR="$HOME/.cache/walset"
readonly CURRENT_FILE="$CACHE_DIR/walset.current"
readonly MATUGEN_SCRIPTS_DIR="$HOME/.config/matugen/scripts"

log_error() { echo "Error: $*" >&2; }
log_info() { echo "Info: $*"; }

write_current() {
  printf "%s\n%s\n%s\n" "$1" "$2" "$3" >"$CURRENT_FILE" 2>/dev/null || true
}

print_usage() {
  cat <<EOF
Description: Apply a new colorscheme and update the system theme.

Usage: $(basename "$0") <path_to_wallpaper> [--scheme <matugen_scheme>] [--mode <dark|light>] [--json <json>]

Options:
  -s, --scheme   Matugen scheme type (default: scheme-tonal-spot)
  -m, --mode     Theme mode: dark|light (default: dark)
  -h, --help     Show this help and exit

Examples:
  $(basename "$0") ~/Pictures/wallpaper.jpg
  $(basename "$0") ~/Pictures/wallpaper.jpg --mode light
  $(basename "$0") ~/Pictures/wallpaper.jpg --scheme scheme-content --mode dark
  $(basename "$0") ~/Pictures/wallpaper.jpg --json '{"key": "value"}'
EOF
}

validate_input() {
  local wallpaper="$1"
  [[ -f "$wallpaper" ]] || {
    log_error "Wallpaper not found: $wallpaper"
    exit 1
  }
  file --mime-type -b "$wallpaper" | grep -q '^image/' || {
    log_error "File is not a valid image: $wallpaper"
    exit 1
  }
}

run_update_script() {
  local name="$1"
  local script="$MATUGEN_SCRIPTS_DIR/update_${name}.sh"

  if [[ -f "$script" ]]; then
    if [[ ! -x "$script" ]]; then
      chmod +x "$script"
      log_info "Made $script executable"
    fi
    if ! "$script"; then
      log_error "Update script failed: $script"
    fi
  else
    log_info "Update script missing: $script"
  fi
}

run_update_script_bg() {
  run_update_script "$1" &
  disown
}

# =============================================================================
# Main
# =============================================================================
main() {
  local MATUGEN_SCHEME="scheme-tonal-spot"
  local MODE="dark"
  local JSON_ARG="" JSON_VALUE=""
  local wallpaper=""

  # Parse args
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      print_usage
      exit 0
      ;;
    -s | --scheme)
      MATUGEN_SCHEME="${2:-}"
      shift 2
      ;;
    -m | --mode)
      MODE="${2:-}"
      shift 2
      ;;
    --json)
      JSON_ARG="--json"
      JSON_VALUE="${2:-}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    -*)
      log_error "Unknown option: $1"
      shift
      ;;
    *)
      wallpaper="$1"
      shift
      ;;
    esac
  done

  [[ -n "$wallpaper" ]] || {
    print_usage
    exit 1
  }
  [[ "$MODE" =~ ^(dark|light)$ ]] || MODE="dark"
  mkdir -p "$CACHE_DIR"

  validate_input "$wallpaper"
  log_info "Applying wallpaper and updating theme: $wallpaper"

  # Skip if already applied
  if [[ -f "$CURRENT_FILE" ]]; then
    mapfile -t __cur <"$CURRENT_FILE" || true
    if [[ "${__cur[0]:-}" == "$wallpaper" && "${__cur[1]:-}" == "$MATUGEN_SCHEME" && "${__cur[2]:-}" == "$MODE" ]]; then
      log_info "Selection unchanged; skipping."
      exit 0
    fi
  fi
  export MODE="$MODE"
  write_current "$wallpaper" "$MATUGEN_SCHEME" "$MODE"

  # Remove symlink to avoid editing parent gtk.css
  for gtk_version in 3.0 4.0; do
    gtk_css_path="$HOME/.config/gtk-$gtk_version/gtk.css"
    if [[ -L "$gtk_css_path" ]]; then
      log_info "Removing symlink: $gtk_css_path"
      rm -f "$gtk_css_path"
    fi
  done

  # Run matugen
  if ! matugen image "$wallpaper" --type "$MATUGEN_SCHEME" --mode "$MODE" \
    ${JSON_ARG:+$JSON_ARG "$JSON_VALUE"} >/dev/null; then
    log_error "Matugen failed to apply theme"
    rm -f "$CURRENT_FILE"
    exit 1
  fi

  # Run update scripts
  run_update_script_bg "terminal"
  run_update_script_bg "folders"
  run_update_script_bg "hyprlock_icon"
  run_update_script_bg "services"
  run_update_script_bg "spotify"
  run_update_script_bg "bat"
  run_update_script "gtk"
  hyprctl reload &>/dev/null
  wait || true

  log_info "Theme application completed successfully"
}

main "$@"
