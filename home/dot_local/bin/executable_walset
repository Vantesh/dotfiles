#!/usr/bin/env bash
set -euo pipefail

# =============================================================================
# Constants
# =============================================================================
readonly CACHE_DIR="$HOME/.cache/walset"
readonly CURRENT_FILE="$CACHE_DIR/walset.current"
readonly MATUGEN_SCRIPTS_DIR="$HOME/.config/matugen/scripts"
export MODE=${MODE:-dark}

# =============================================================================
# Logging
# =============================================================================
log_error() { echo "Error: $*" >&2; }
log_info() { echo "Info:  $*"; }

# =============================================================================
# Helpers
# =============================================================================
write_current() {
  printf "%s\n%s\n%s\n" "$1" "$2" "$3" >"$CURRENT_FILE" 2>/dev/null || true
}

print_usage() {
  cat <<EOF
Description: Apply a new colorscheme and update the system theme.

Usage: $(basename "$0") <path_to_wallpaper> [--scheme <matugen_scheme>] [--mode <dark|light>]

Options:
  -s, --scheme   Matugen scheme type (default: scheme-tonal-spot)
  -m, --mode     Theme mode: dark|light (default: dark)
  -h, --help     Show this help and exit

Examples:
  $(basename "$0") ~/Pictures/wallpaper.jpg
  $(basename "$0") ~/Pictures/wallpaper.jpg --mode light
  $(basename "$0") ~/Pictures/wallpaper.jpg --scheme scheme-content --mode dark
  $(basename "$0") ~/Pictures/wallpaper.jpg --json '{"key": "value"}'
EOF
}

validate_input() {
  local wallpaper="$1"
  [[ -f "$wallpaper" ]] || {
    log_error "Wallpaper not found: $wallpaper"
    exit 1
  }
  file "$wallpaper" | grep -qE "(image|bitmap)" || {
    log_error "File is not a valid image: $wallpaper"
    exit 1
  }
}

update_script() {
  local name="$1"
  local script="$MATUGEN_SCRIPTS_DIR/update_${name}.sh"

  if [[ -f "$script" ]]; then
    if [[ ! -x "$script" ]]; then
      chmod +x "$script"
      log_info "Made $script executable"
    fi
    "$script"
  else
    log_info "Update script missing: $script"
  fi
}

reload_terminal() {
  if command -v kitty &>/dev/null; then
    kitty +kitten themes --reload-in=all matugen &>/dev/null || true
  fi
  if command -v fish &>/dev/null; then
    {
      fish -c "yes | fish_config theme save Matugen" 2>/dev/null
      [[ -f "$HOME/.cache/wal/fzf.fish" ]] && fish "$HOME/.cache/wal/fzf.fish" 2>/dev/null
    } || true
  fi
}

# =============================================================================
# Main
# =============================================================================
main() {
  local MATUGEN_SCHEME="scheme-tonal-spot"
  local MODE="dark"
  local JSON_ARG="" JSON_VALUE=""
  local wallpaper=""

  # Parse args
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      print_usage
      exit 0
      ;;
    -s | --scheme)
      MATUGEN_SCHEME="${2:-}"
      shift 2
      ;;
    -m | --mode)
      MODE="${2:-}"
      shift 2
      ;;
    --json)
      JSON_ARG="--json"
      JSON_VALUE="${2:-}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    -*) shift ;; # ignore unknown flags
    *)
      wallpaper="$1"
      shift
      ;;
    esac
  done

  [[ -n "$wallpaper" ]] || {
    print_usage
    exit 1
  }
  [[ "$MODE" =~ ^(dark|light)$ ]] || MODE="dark"
  mkdir -p "$CACHE_DIR"

  validate_input "$wallpaper"
  log_info "Applying wallpaper and updating theme: $wallpaper"

  # Skip if already applied
  if [[ -f "$CURRENT_FILE" ]]; then
    readarray -t __cur <"$CURRENT_FILE"
    if [[ "${__cur[0]:-}" == "$wallpaper" &&
      "${__cur[1]:-}" == "$MATUGEN_SCHEME" &&
      "${__cur[2]:-}" == "$MODE" ]]; then
      log_info "Selection unchanged; skipping."
      exit 0
    fi
  fi
  write_current "$wallpaper" "$MATUGEN_SCHEME" "$MODE"

  matugen image "$wallpaper" --type "$MATUGEN_SCHEME" --mode "$MODE" ${JSON_ARG:+$JSON_ARG "$JSON_VALUE"} || {
    log_error "Matugen failed to apply theme"
    exit 1
  }

  wallust -q -s run "$wallpaper" -p "${MODE}16" || {
    log_error "Wallust failed"
    exit 1
  }

  # Refresh apps
  reload_terminal &
  hyprctl reload

  # Run update scripts
  update_script "gtk" &
  update_script "folders" &
  update_script "hyprlock_icon" &
  update_script "services" &
  update_script "spotify" &
  wait

  log_info "Theme application completed successfully"
}
main "$@"
