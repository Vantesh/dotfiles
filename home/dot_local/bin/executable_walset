#!/usr/bin/env bash
set -euo pipefail

readonly CACHE_DIR="$HOME/.cache/walset"
readonly CURRENT_FILE="$CACHE_DIR/walset.current"
readonly MATUGEN_SCRIPTS_DIR="$HOME/.config/matugen/scripts"
readonly -a GTK_VERSIONS=(3.0 4.0)
readonly -a UPDATE_TARGETS=(terminal folders hyprlock_icon services spotify bat)

log_error() { printf 'Error: %s\n' "$*" >&2; }
log_info() { printf 'Info: %s\n' "$*"; }
die() {
  log_error "$*"
  exit 1
}

write_current() {
  printf "%s\n%s\n%s\n" "$1" "$2" "$3" >"$CURRENT_FILE" 2>/dev/null || true
}

print_usage() {
  cat <<EOF
Description: Apply a new colorscheme and update the system theme from a wallpaper or color.

Usage: $(basename "$0") image <path_to_wallpaper> [--scheme <matugen_scheme>] [--mode <dark|light>]
  $(basename "$0") color <hex_color> [--scheme <matugen_scheme>] [--mode <dark|light>]

Options:
  -s, --scheme   Matugen scheme type (default: scheme-tonal-spot)
  -m, --mode     Theme mode: dark|light (default: dark)
  -h, --help     Show this help and exit

Examples:
  $(basename "$0") image ~/Pictures/wallpaper.jpg --mode light/dark
  $(basename "$0") image ~/Pictures/wallpaper.jpg --scheme scheme-content --mode dark/light
  $(basename "$0") color "#ff5733"
  $(basename "$0") color "#ff5733" --mode light
EOF
}

validate_image() {
  local file="$1"
  [[ -f "$file" ]] || die "Wallpaper not found: $file"
  if ! file --mime-type -b "$file" | grep -q '^image/'; then
    die "File is not a valid image: $file"
  fi
}

validate_color() {
  local color="$1"
  if [[ "$color" =~ ^#?([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$ ]]; then return 0; fi
  die "Invalid hex color format: $color (expected #RRGGBB or #RGB)"
}

normalize_color() {
  local color="$1"
  [[ "$color" =~ ^# ]] && echo "$color" || echo "#$color"
}

run_update_script() {
  local name="$1"
  local script="$MATUGEN_SCRIPTS_DIR/update_${name}.sh"

  if [[ -f "$script" ]]; then
    if [[ ! -x "$script" ]]; then
      chmod +x "$script"
      log_info "Made $script executable"
    fi
    if ! "$script"; then log_error "Update script failed: $script"; fi
  else
    log_info "Update script missing: $script"
  fi
}

run_matugen() {
  local input="$1" scheme="$2" mode="$3" is_color="$4"
  local -a cmd
  if [[ "$is_color" == true ]]; then
    cmd=(matugen color hex "$input" --type "$scheme" --mode "$mode")
  else
    cmd=(matugen image "$input" --type "$scheme" --mode "$mode")
  fi
  "${cmd[@]}" >/dev/null
}

is_selection_unchanged() {
  local in="$1" scheme="$2" mode="$3"
  [[ -f "$CURRENT_FILE" ]] || return 1
  mapfile -t __cur <"$CURRENT_FILE" || return 1
  [[ "${__cur[0]:-}" == "$in" && "${__cur[1]:-}" == "$scheme" && "${__cur[2]:-}" == "$mode" ]]
}

parse_args() {
  MATUGEN_SCHEME="scheme-tonal-spot"
  MODE="dark"
  WALLPAPER=""
  HEX_COLOR=""
  IS_COLOR_MODE=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      print_usage
      exit 0
      ;;
    image)
      IS_COLOR_MODE=false
      WALLPAPER="${2:-}"
      shift 2
      ;;
    color)
      IS_COLOR_MODE=true
      HEX_COLOR="${2:-}"
      shift 2
      ;;
    -s | --scheme)
      MATUGEN_SCHEME="${2:-}"
      shift 2
      ;;
    -m | --mode)
      MODE="${2:-}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    -*) die "Unknown option: $1" ;;
    *) die "Unknown command: $1" ;;
    esac
  done
}

main() {
  # Parse args and set defaults
  parse_args "$@"

  # Input validation and normalization
  local input_source=""
  if $IS_COLOR_MODE; then
    [[ -n "$HEX_COLOR" ]] || die "Missing hex color"
    validate_color "$HEX_COLOR"
    input_source=$(normalize_color "$HEX_COLOR")
    log_info "Applying color theme: $input_source"
  elif [[ -n "$WALLPAPER" ]]; then
    validate_image "$WALLPAPER"
    input_source="$WALLPAPER"
    log_info "Applying wallpaper theme: $WALLPAPER"
  else
    print_usage
    die "You must specify either 'image <path>' or 'color <hex>'"
  fi

  [[ "$MODE" =~ ^(dark|light)$ ]] || MODE="dark"
  mkdir -p "$CACHE_DIR"

  if is_selection_unchanged "$input_source" "$MATUGEN_SCHEME" "$MODE"; then
    log_info "Selection unchanged; skipping."
    exit 0
  fi

  export MODE="$MODE"
  write_current "$input_source" "$MATUGEN_SCHEME" "$MODE"

  for gtk_version in "${GTK_VERSIONS[@]}"; do
    local gtk_css="$HOME/.config/gtk-$gtk_version/gtk.css"
    if [[ -L "$gtk_css" ]]; then
      log_info "Removing symlink: $gtk_css"
      rm -f "$gtk_css"
    fi
  done

  if ! run_matugen "$input_source" "$MATUGEN_SCHEME" "$MODE" "$IS_COLOR_MODE"; then
    log_error "Matugen failed"
    rm -f "$CURRENT_FILE"
    exit 1
  fi

  # Run update scripts (gtk first, idk why it doesn't work in background)
  run_update_script "gtk"

  for target in "${UPDATE_TARGETS[@]}"; do
    run_update_script "$target" &
  done

  hyprctl reload >/dev/null || true
  wait || true

  log_info "Theme applied successfully"
}

main "$@"
