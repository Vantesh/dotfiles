#!/bin/bash

# =============================================================================
# CONFIGURATION ARRAYS
# =============================================================================

readonly USER_SERVICES=(
  hyprpolkitagent.service
  gnome-keyring-daemon.service
  hypridle.service
)

readonly SYSTEM_SERVICES=(
  bluetooth.service
  sddm.service
  ufw.service
)

readonly DNSCRYPT_CONFIG_FILE="/etc/dnscrypt-proxy/dnscrypt-proxy.toml"
readonly NETWORKMANAGER_CONF="/etc/NetworkManager/conf.d/no-systemd-resolved.conf"

# =============================================================================
# SERVICE MANAGEMENT FUNCTIONS
# =============================================================================

enable_user_services() {
  for service in "${USER_SERVICES[@]}"; do
    enable_service "$service" "user"
  done
}

enable_system_services() {
  for service in "${SYSTEM_SERVICES[@]}"; do
    enable_service "$service" "system"
  done
}

enable_ufw_firewall() {
  printc -n cyan "Enabling UFW firewall... "
  if sudo ufw enable >/dev/null 2>&1; then
    printc green "OK"
  else
    fail "FAILED"
  fi
}

services_to_disable=(
  NetworkManager-wait-online.service
)
for service in "${services_to_disable[@]}"; do
  disable_service "$service" "system"
done

# =============================================================================
# DNS CONFIGURATION FUNCTIONS
# =============================================================================

install_dnscrypt_proxy() {
  if ! has_cmd dnscrypt-proxy; then
    install_package "dnscrypt-proxy" || fail "FAILED"
  else
    return 0
  fi
}

configure_resolv_conf() {
  if sudo rm -f /etc/resolv.conf; then
    if write_system_config "/etc/resolv.conf" "DNS configuration" <<'EOF'; then
# Generated by dnscrypt-proxy
nameserver ::1
nameserver 127.0.0.1
options edns0
EOF
      if sudo chattr +i /etc/resolv.conf; then
        printc green "OK"
      else
        fail "FAILED to set immutable attribute"
      fi
    else
      fail "FAILED to write resolv.conf"
    fi
  else
    fail "FAILED to remove existing resolv.conf"
  fi
}

configure_dnscrypt_proxy() {
  printc -n cyan "Configuring dnscrypt-proxy... "
  declare -A config_values=(
    ["server_names"]="['cloudflare', 'cloudflare-ipv6']"
  )
  for key in "${!config_values[@]}"; do
    update_config "$DNSCRYPT_CONFIG_FILE" "$key" "${config_values[$key]}"
  done
  printc green "OK"
  enable_service "dnscrypt-proxy.service" "system"

}

disable_systemd_resolved() {

  # Create NetworkManager configuration
  if [[ ! -f "$NETWORKMANAGER_CONF" ]]; then
    write_system_config "$NETWORKMANAGER_CONF" "NetworkManager configuration to disable systemd-resolved" <<'EOF'
[main]
systemd-resolved=false
EOF
  fi

  # Stop and disable systemd-resolved service
  if disable_service "systemd-resolved.service" "system"; then
    printc -n cyan "Restarting NetworkManager... "
    if sudo systemctl restart NetworkManager; then
      printc green "OK"
    else
      fail "FAILED to restart NetworkManager"
    fi
  fi
}

setup_dns_over_https() {
  install_dnscrypt_proxy
  configure_resolv_conf
  configure_dnscrypt_proxy
  disable_systemd_resolved
  printc green "DNS over HTTPS setup completed successfully."
}

# =============================================================================
# MAIN EXECUTION FUNCTIONS
# =============================================================================

main() {
  enable_user_services
  enable_system_services
  enable_ufw_firewall

  if echo && confirm "Setup DNS over HTTPS using dnscrypt-proxy?"; then
    setup_dns_over_https
  else
    printc yellow "Skipping DNS over HTTPS setup."
  fi

}

main
